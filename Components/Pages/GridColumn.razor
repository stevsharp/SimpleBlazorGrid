@typeparam TRowData
@using System.Linq.Expressions
@using Humanizer

@code {
    [CascadingParameter]
    public Grid<TRowData> OwnerGrid { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Expression<Func<TRowData, object>> Expression { get; set; }

    [Parameter]
    public string Format { get; set; }

    [Parameter]
    public RenderFragment<TRowData> ChildContent { get; set; }

    private Func<TRowData, object> compiledExpression;

    private Expression lastCompiledExpression;

    private RenderFragment headerTemplate;

    private RenderFragment<TRowData> cellTemplate;

    [Parameter]
    public string SortKey { get; set; } 

    [Parameter]
    public Expression<Func<TRowData, object>> SortByExpression { get; set; }

    public Func<TRowData, object> GetSortValue { get; set; }

    public bool Filterable { get; set; } = true;

    protected override void OnInitialized()
    {
        OwnerGrid.AddColumn(this);
    }

    protected override void OnParametersSet()
    {
        if (lastCompiledExpression != Expression)
        {
            compiledExpression = Expression?.Compile();

            lastCompiledExpression = Expression;

            this.SortKey = GetMemberName(SortByExpression).Humanize();
        }
    }

    internal RenderFragment HeaderTemplate
    {
        get
        {
            return headerTemplate ??= (builder =>
            {
                var title = Title;
                if (title is null && Expression is not null)
                {
                    title = GetMemberName(Expression).Humanize();
                }

                builder.OpenElement(0, "th");
                builder.AddContent(1, title);
                builder.CloseElement();
            });
        }
    }

    internal RenderFragment<TRowData> CellTemplate
    {
        get
        {
            return cellTemplate ??= (rowData => builder =>
            {
                builder.OpenElement(0, "td");
                if (compiledExpression is not null)
                {
                    var value = compiledExpression(rowData);
                    var formattedValue = string.IsNullOrEmpty(Format) ? value?.ToString() : string.Format("{0:" + Format + "}", value);
                    builder.AddContent(1, formattedValue);
                }
                else
                {
                    builder.AddContent(2, ChildContent, rowData);
                }

                builder.CloseElement();
            });
        }
    }

    private static string GetMemberName<T>(Expression<T> expression)
    {
        return expression.Body switch
        {
            MemberExpression m => m.Member.Name,
            UnaryExpression u when u.Operand is MemberExpression m => m.Member.Name,
            _ => throw new NotSupportedException("Expression of type '" + expression.GetType().ToString() + "' is not supported")
        };
    }
}