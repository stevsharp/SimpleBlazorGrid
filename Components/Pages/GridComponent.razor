@using Microsoft.AspNetCore.Components.Rendering
@using System.Linq

<div class="grid-container">
    <!-- Filter Section -->
    <div class="filter-section">
        <input @bind="FilterText" placeholder="Filter..." class="filter-input" />
    </div>

    <!-- Table Section -->
    <div class="table-section">
        <table class="table">
            <thead>
                <tr>
                    @foreach (var column in Columns)
                    {
                        <th>@column.Title</th>
                    }
                </tr>
            </thead>
            <tbody>
                @if (PagedRows.Any())
                {
                    @foreach (var row in PagedRows)
                    {
                        <tr>
                            @foreach (var column in Columns)
                            {
                                <td>@(row.Columns.Length > column.ColumnIndex ? row.Columns[column.ColumnIndex] : "")</td>
                            }
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="@Columns.Count" class="text-center">No data available</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Section -->
    <div class="pagination-section">
        <button @onclick="PrevPage" disabled="@IsFirstPage" class="pagination-button">Previous</button>
        <span class="pagination-info">Page @CurrentPage of @TotalPages</span>
        <button @onclick="NextPage" disabled="@IsLastPage" class="pagination-button">Next</button>
    </div>

    <!-- Debug Information (Optional) -->
    <div class="debug-info">
        <p>Total Rows: @Grid?.Rows.Count</p>
        <p>Paged Rows: @PagedRows.Count()</p>
    </div>
</div>

@code {
    [Parameter]
    public Grid? Grid { get; set; }

    [Parameter]
    public List<GridRow>? Rows { get; set; }

    [Parameter]
    public List<GridColumn>? Columns { get; set; }


    private string FilterText { get; set; } = string.Empty;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int CurrentSortColumn { get; set; } = -1;
    private bool IsSortDescending { get; set; }

    private IEnumerable<GridRow> PagedRows => Grid!.GetFilteredAndSortedRows()
                .Skip((CurrentPage - 1) * PageSize)
                .Take(PageSize);

    private int TotalPages => Grid == null || Grid.GetFilteredAndSortedRows() == null
        ? 0
        : (int)Math.Ceiling((double)Grid.GetFilteredAndSortedRows().Count() / PageSize);

    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    protected override void OnParametersSet()
    {
        if (Grid != null)
        {
            Grid.Filter = row => string.IsNullOrEmpty(FilterText) || 
                row.Columns.Any(col => col.Contains(FilterText, StringComparison.InvariantCultureIgnoreCase));
        }
    }
    private async Task SortByColumnAsync(int columnIndex)
    {
        if (Grid is null)
        {
            throw new InvalidOperationException("Grid cannot be null.");
        }

        if (Grid.Rows == null || !Grid.Rows.Any())
        {
            throw new InvalidOperationException("Grid rows cannot be null or empty.");
        }

        if (columnIndex < 0 || columnIndex >= Grid.Rows.First().Columns.Length)
        {
            throw new ArgumentOutOfRangeException(nameof(columnIndex), "Column index is out of range.");
        }

        if (CurrentSortColumn == columnIndex)
        {
            IsSortDescending = !IsSortDescending;
        }
        else
        {
            CurrentSortColumn = columnIndex;
            IsSortDescending = false;
        }

        Grid.SortBy = row => row.Columns[columnIndex];
        Grid.IsSortDescending = IsSortDescending;

        await InvokeAsync(StateHasChanged);
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            StateHasChanged();
        }
    }

    private void PrevPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            StateHasChanged();
        }
    }
}